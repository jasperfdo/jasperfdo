{"version":3,"sources":["images/no_image.jpg","images/react-movie-logo.svg","images/tmdb_logo.svg","images/search-icon.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","API.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","hooks/useHomeFetch.js","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["module","exports","Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","value","rating","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","SearchIcon","type","placeholder","onChange","event","currentTarget","button","Button","callback","onClick","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","console","log","API","movies","prev","useHomeFetch","backdrop_path","original_title","overview","map","movie","key","id","poster_path","NoImage","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","credit_id","name","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e95cb08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_image.31f5bb1d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/react-movie-logo.5de5919a.svg\";","module.exports = __webpack_public_path__ + \"static/media/tmdb_logo.30cd724b.svg\";","module.exports = __webpack_public_path__ + \"static/media/search-icon.80e9d8a2.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  max-width: var(--maxWidth);\r\n  padding: 20px 0;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n  width: 200px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n  width: 100px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 80px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport RMDBLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// import { Wrapper } from \"./Header.styles\";\r\n// import { Content } from \"./Header.styles\";\r\n// import { LogoImg } from \"./Header.styles\";\r\n// import { TMDBLogoImg } from \"./Header.styles\";\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from \"./Header.styles\";\r\n\r\nconst Header = () => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to='/'>\r\n            <LogoImg src={RMDBLogo} alt='rmdb-logo' />\r\n            </Link>\r\n            <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\n\r\nexport default Header;","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","//to style the components\nimport styled from \"styled-components\";\n\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\n\n/* display: none; */\nbackground: linear-gradient(\n    to bottom, rgba(0, 0, 0, 0)\n    41%, rgba(0, 0, 0, 0)\n    100%\n),\nurl(${({ image }) => image}), var(--darkGrey);\nbackground-size: 100%, cover;\nbackground-position: center;\nheight: 600px;\nposition: relative;\nanimation: animateHeroImage 1s;\n\n\n\n\n@keyframes animateHeroImage {\n    from{\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n`;\n\nexport const Content = styled.div`\n    padding: 20px;\n    max-width: var(--maxWidth);\n    margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n    z-index: 100;\n    max-width: 700px;\n    position: absolute;\n    bottom: 40px;\n    margin-right: 20px;\n    min-height: 100px;\n    color: var(--white);\n\n    h1{\n        font-size: var(--fontSuperSuperBig);\n\n        @media screen and (max-width: 720px) {\n            font-size: var(--fontSuperBig);\n        }\n    }\n\n    p {\n        font-size: var(--fontMed);\n\n        @media screen and (max-width: 720px) {\n            font-size: var(--fontSmall);\n        }\n    }\n`;\n\n","import React from \"react\";\r\n//styles\r\nimport { Wrapper, Content, Text } from \"./HeroImage.styles\";\r\n\r\n// const HeroImage = (prop) => (\r\n//     <Wrapper image={prop.image} >\r\n//         <Content>\r\n//             <Text>\r\n//                 <h1>{prop.title}</h1>\r\n//                 <p>{prop.text}</p>\r\n//             </Text>\r\n//         </Content>\r\n//     </Wrapper>\r\n// );\r\n\r\n//ES6 syntax\r\nconst HeroImage = ({ image, title, text }) => (//es6 syntax of defining the props value inside ({})\r\n    <Wrapper image={image} >\r\n        {/* <div className=\"image2\"><Wrapper image={image} ></Wrapper></div> */}\r\n        <Content>\r\n            <Text>\r\n                <h1>{title}</h1>\r\n                <p>{text}</p>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default HeroImage;","import styled from \"styled-components\";\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n\r\nmax-width: var(--maxWidth);\r\nmargin: 0 auto;\r\npadding: 0 20px;\r\n\r\n\r\n\r\n.sc-pVTFL{\r\n    animation: gridd 1s;\r\n}\r\n\r\n@keyframes gridd {\r\n    from{\r\n        opacity: 0;\r\n    }\r\n    to {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\nh1 {\r\n    color: var(--medGrey);\r\n\r\n    @media screen and (max-width: 768px) {\r\n        font-size: var(--fontBig);\r\n    }\r\n}\r\n\r\n`;\r\n\r\nexport const Content = styled.div`\r\n\r\ndisplay: grid;\r\ngrid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\ngrid-gap: 2rem;\r\n\r\n`;","import React from \"react\";\r\n\r\nimport { Wrapper, Content } from \"./Grid.styles\";\r\n\r\nconst Grid = ({ header, children }) => (\r\n    <Wrapper>\r\n        <h1>{header}</h1>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Grid;","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n\r\nwidth: 100%;\r\nmax-width: 720px;\r\ntransition: all 0.3s;\r\nobject-fit: cover;\r\nborder-radius: 30px;\r\nanimation: animateThumb 1s;\r\n\r\n\r\n:hover {\r\n    opacity: 0.75;\r\n    /* transform: translatey(-10px) translatex(-5px) scale(1.05);      */\r\n}\r\n\r\n@keyframes animateThumb {\r\n    from{\r\n        opacity: 0;\r\n    }\r\n    to {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n\r\n`;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Image } from \"./Thumb.styles\";\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n\r\n\r\n    <div>\r\n        {clickable ? (\r\n            <Link to={`/${movieId}`}>\r\n                <Image src={image} alt='movie-thumb' />\r\n            </Link>\r\n        ) : (\r\n\r\n            <Image src={image} alt='movie-thumb' />\r\n        )}\r\n    </div >\r\n);\r\n\r\nexport default Thumb;","import { Spinner } from \"./Spinner.styles\";\r\n\r\nexport default Spinner;","import styled from \"styled-components\";\r\n\r\nexport const Spinner = styled.div`\r\n\r\nborder: 5px solid var(--lightGrey);\r\nborder-top: 5px solid var(--medGrey);\r\nborder-bottom: 5px solid grey;\r\nborder-radius: 50%;\r\nwidth: 50px;\r\nheight: 50px;\r\nanimation: spin 0.8s linear infinite;\r\nmargin: 20px auto;\r\n\r\n@keyframes spin {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\nheight: 100px;\r\nbackground: var(--darkGrey);\r\npadding: 0 20px;\r\n\r\n\r\n`;\r\n\r\nexport const Content = styled.div`\r\nposition: relative;\r\nmax-width: var(--maxWidth);\r\nwidth: 100%;\r\nheight: 55px;\r\nbackground: var(--medGrey);\r\nmargin: 0 auto;\r\nborder-radius: 40px;\r\ncolor: var(--white);\r\n\r\nimg {\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 14px;\r\n    width: 30px;\r\n}\r\n\r\ninput {\r\n    font-size: 28px;\r\n    position: absolute;\r\n    left: 0;\r\n    margin: 8px 0;\r\n    padding: 0 0 0 60px;\r\n    border: 0;\r\n    width: 95%;\r\n    background: transparent;\r\n    height: 40px;\r\n    color: var(--white);\r\n\r\n    :focus {\r\n        outline: none;\r\n    }\r\n\r\n    @media screen and (max-width: 768px) {\r\n        font-size: var(--fontMed);\r\n    }\r\n}\r\n\r\n`;","import React, { useState, useEffect, useRef } from \"react\";\r\n//image\r\nimport SearchIcon from \"../../images/search-icon.svg\";\r\n//styles\r\nimport { Wrapper, Content } from \"./SearchBar.styles\";\r\n\r\nconst SearchBar = ({ setSearchTerm }) => {\r\n\r\n    const [state, setState] = useState('');\r\n    const initial = useRef(true);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (initial.current) {\r\n            initial.current = false;\r\n            return;\r\n        }\r\n        const timer = setTimeout(() => {\r\n            setSearchTerm(state)\r\n        }, 500)\r\n\r\n        return () => clearTimeout(timer)\r\n    }, [setSearchTerm, state])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Content>\r\n                <img src={SearchIcon} alt='search-icon' />\r\n                <input\r\n                    type='text'\r\n                    placeholder='Search Movie'\r\n                    onChange={event => setState(event.currentTarget.value)}\r\n                    value={state}\r\n                />\r\n            </Content>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\n\r\nexport default SearchBar;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.button`\r\n\r\ndisplay: block;\r\nbackground: var(--darkGrey);\r\nwidth: 25%;\r\nheight: 60px;\r\nborder-radius: 30px;\r\ncolor: var(--white);\r\nfont-size: var(--fontBig);\r\nmargin: 20px auto;\r\ntransition: all 0.3s;\r\noutline: none;\r\ncursor: pointer;\r\n:hover {\r\n    opacity: 0.8;\r\n}\r\n\r\n\r\n`;","import React from \"react\";\r\n\r\nimport { Wrapper } from './Button.styles';\r\n\r\n\r\n\r\nconst Button = ({ text, callback }) => (\r\n    <Wrapper type=\"button\" onClick={callback}>\r\n        {text}\r\n    </Wrapper>\r\n\r\n);\r\n\r\n\r\nexport default Button;","import { useState, useEffect, useRef } from \"react\";\r\n//API\r\nimport API from '../API';\r\n\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    total_pages: 0,\r\n    total_results: 0,\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n    //states\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [state, setState] = useState(initialState); // initial state, we came name state as any eg: can name it as cool :- const [cool, setCool] = useState();\r\n    const [loading, setLoading] = useState(false); //is use when loading\r\n    const [error, setError] = useState(false); // is used when error from the movie database\r\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n    console.log(searchTerm);\r\n\r\n    const fetchMovies = async (page, searchTerm = '') => {\r\n        try {//setting the states when render\r\n            setError(false);\r\n            setLoading(true);\r\n\r\n            const movies = await API.fetchMovies(searchTerm, page);\r\n            console.log(movies);\r\n            //setting the state \r\n            setState(prev => ({\r\n                ...movies,//importing all the data from movies and spread it here\r\n                results://results is that, where all the listed movies are there :: from the database\r\n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results] //this is the idf statement (shorted) were if load more is clicked, updating (appending) the page with old movies and new movies\r\n            }))\r\n\r\n        } catch (error) {\r\n            setError(true);\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    //initial and search\r\n    useEffect(() => {\r\n        setState(initialState);\r\n        fetchMovies(1, searchTerm);\r\n    }, [searchTerm]);\r\n\r\n    //Load More\r\n\r\n    useEffect(() => {\r\n        if (!isLoadingMore) return;\r\n        fetchMovies(state.page + 1, searchTerm)\r\n        setIsLoadingMore(false);\r\n    }, [isLoadingMore, searchTerm, state.page]);\r\n\r\n    return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\r\n};","//React\r\nimport React from \"react\";\r\n\r\n//API\r\nimport API from '../API';\r\n\r\n// config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL, API_KEY } from '../config';\r\n\r\n// components\r\nimport HeroImage from './HeroImage';\r\nimport Grid from \"./Grid\";\r\nimport Thumb from \"./Thumb\";\r\nimport Spinner from \"./Spinner\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Button from \"./Button\";\r\n\r\n// Hooks\r\nimport { useHomeFetch } from \"../hooks/useHomeFetch\"; \r\n\r\n\r\n// noImg\r\nimport NoImage from '../images/no_image.jpg';\r\nimport { stat } from \"fs\";\r\n\r\n\r\n\r\nconst Home = () => {\r\n\r\n    const { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore } = useHomeFetch();\r\n\r\n    // console.log(state);\r\n\r\n    if (error) return <div>Something went wrong ...</div>;\r\n\r\n    return (\r\n\r\n        <>\r\n            \r\n            {!searchTerm && state.results[0] ? (\r\n                <HeroImage\r\n                    image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                    title={state.results[0].original_title}\r\n                    text={state.results[0].overview}\r\n                />\r\n            ) : null}\r\n\r\n\r\n            <SearchBar setSearchTerm={setSearchTerm} />\r\n            \r\n            <Grid header={searchTerm && !loading ? 'Search Results' \r\n                        : !searchTerm && !loading ? 'Popular Movies'\r\n                        : 'Loading...' }>\r\n                {state.results.map(movie => (\r\n                    <Thumb\r\n                        key={movie.id}\r\n                        clickable\r\n                        image={\r\n                            movie.poster_path\r\n                            ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                            : NoImage\r\n                        }\r\n\r\n                        movieId={movie.id}\r\n                    />\r\n                ))}\r\n            </Grid>\r\n            {loading && <Spinner />}\r\n            {state.page < state.total_pages && !loading && (\r\n                <Button text='Load More' callback={() => setIsLoadingMore(true)} />\r\n            )}\r\n\r\n            \r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default Home;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: center;\r\nwidth: 100%;\r\nheight: 70px;\r\nbackground: var(--medGrey);\r\ncolor: var(--white);\r\n\r\n`;\r\n\r\nexport const Content = styled.div`\r\n\r\ndisplay: flex;\r\nwidth: 100%;\r\nmax-width: var(--maxWidth);\r\npadding: 0 20px;\r\nspan {\r\n    font-size: var(--fontMed);\r\n    color: var(--white);\r\n    padding-right: 10px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        font-size: var(--fontSmall);\r\n    }\r\n}\r\n\r\n\r\n`;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//styles\r\n\r\nimport { Wrapper, Content } from \"./BreadCrumb.styles\";\r\n\r\nconst BreadCrumb = ({movieTitle}) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to='/' >\r\n                <span>Home</span>\r\n            </Link>\r\n            <span>|</span>\r\n            <span>{movieTitle}</span>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default BreadCrumb;","import styled from \"styled-components\";\r\n\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n\r\nbackground: ${({ backdrop }) =>\r\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\r\nbackground-size: cover;\r\nbackground-position: center;\r\npadding: 40px 20px;\r\nanimation: animationMovieInfo 1s;\r\n\r\n\r\n\r\n\r\n@keyframes animationMovieInfo {\r\n    from {\r\n        opacity: 0;\r\n    }\r\n    to {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n\r\n`;\r\n\r\nexport const Content = styled.div`\r\n\r\ndisplay: flex;\r\nmax-width: var(--maxWidth);\r\nmargin: 0 auto;\r\nbackground: rgba(0, 0, 0, 0.7);\r\nborder-radius: 30px;\r\n\r\n@media screen and (max-width: 768px) {\r\n    display: block;\r\n    max-height: none;\r\n}\r\n`;\r\n\r\n\r\n\r\nexport const Text = styled.div`\r\n\r\n\r\nwidth: 100%;\r\npadding: 20px 40px;\r\ncolor: var(--white);\r\noverflow: hidden;\r\n\r\n.rating-directors {\r\n    display: flex;\r\n    justify-content: flex-start;    \r\n}\r\n\r\n.score {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 35px;\r\n    background: #fff;\r\n    color: #000;\r\n    font-weight: 800;\r\n    border-radius: 50%;\r\n    margin: 0;\r\n}\r\n\r\n.director {\r\n    margin: 0 0 0 40px;\r\n\r\n    p {\r\n    margin: 0;\r\n}\r\n}\r\n\r\nh1 {\r\n    @media screen and (max-width: 768px) {\r\n        font-size: var(--fontBig);\r\n    }\r\n}\r\n\r\n`;","import React from \"react\";\r\n//Component\r\nimport Thumb from '../Thumb'\r\n//config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../../config\";\r\n//image\r\nimport NoImage from '../../images/no_image.jpg';\r\n//styles\r\nimport { Wrapper, Content, Text } from \"./MovieInfo.styles\";\r\n\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n    <Wrapper backdrop={movie.backdrop_path}>\r\n        <Content>\r\n            <Thumb\r\n                image={movie.poster_path\r\n                    ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n                    : NoImage\r\n                }\r\n                clickable={false}\r\n                alt='movie-thumb'\r\n            />\r\n            <Text>\r\n                <h1>{movie.title}</h1>\r\n                <h3>PLOT</h3>\r\n                <p>{movie.overview}</p>\r\n\r\n                <div className=\"rating-directors\">\r\n                    <div>\r\n                        <h3>RATING</h3>\r\n                        <div className=\"score\">{movie.vote_average}</div>\r\n                    </div>\r\n                    <div className=\"director\">\r\n                        <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\r\n                        {movie.directors.map(director => (\r\n                            <p key={director.credit_id}>{director.name}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\n\r\nexport default MovieInfo;","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n//Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\r\n//Components\r\nimport Grid from \"./Grid\";\r\nimport Spinner from \"./Spinner\";\r\nimport BreadCrumb from \"./BreadCrumb\";\r\nimport MovieInfo from \"./MovieInfo\";\r\n//Hook\r\nimport { useMovieFetch } from \"../hooks/useMovieFetch\";\r\n\r\n//Img\r\nimport NoImage from '../images/no_image.jpg'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Movie = () => {\r\n\r\n    const { movieId } = useParams();\r\n\r\n    const { state: movie, loading, error } = useMovieFetch(movieId);\r\n\r\n    if (loading) return <Spinner />\r\n    if (error) return <div>Something went wrong...</div>\r\n\r\n\r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Movie;","import { useState, useEffect } from \"react\";\r\n\r\nimport API from '../API';\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchMovie = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError(false);\r\n\r\n                const movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n\r\n                //get directors only\r\n                const directors = credits.crew.filter(\r\n                    member => member.job === 'Director'\r\n                );\r\n\r\n                setState({\r\n                    ...movie,\r\n                    actors: credits.cast,\r\n                    directors\r\n                })\r\n\r\n                setLoading(false);\r\n\r\n            }\r\n            catch (error) {\r\n                setError(true);\r\n            }\r\n        }\r\n        fetchMovie();\r\n    }, [movieId]);//(dependency array - [] )\r\n\r\n    return { state, loading, error }\r\n};","import React from \"react\";\r\n\r\nconst NotFound = () => <div>Not Found</div>\r\n\r\nexport default NotFound;","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --maxWidth: 1280px; \n    --white: #fff;\n    --lightGrey: #eee;\n    --medGrey: #353535; \n    --darkGrey: #1c1c1c;\n    --fontSuperBig: 2.5rem;\n    --fontSuperSuperBig: 3rem;\n    --fontBig: 1.5rem;\n    --fontMed: 1.2rem;\n    --fontSmall: 1rem;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;  \n  }\n\n  body {  \n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n\n    h1 {\n      font-size: 2rem;\n      font-weight: 600;\n      color: var(--white);\n    }\n\n    h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 1rem;\n      color: var(--white);\n    }\n  }\n`;\n","import React from 'react';\n//API\n// import API from './API';\n\n//Router\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n//components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\n\n\n//styles\nimport { GlobalStyle } from './GlobalStyle';\n\nconst App = () =>\n(\n  <Router>\n    <Header />\n    <Routes>\n      <Route path='/' element={<Home />} />\n      <Route path='/:movieId' element={<Movie />} />\n      <Route path='/*' element={<NotFound />} />\n\n    </Routes>\n    <GlobalStyle />\n\n  </Router >\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}